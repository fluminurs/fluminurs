on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '[0-9]+.[0-9]+.[0-9]+' # real actual release
      - 'rust-**'             # a test for new rust compiler version

name: Release

jobs:
  create_release:
    name: Create Release

    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.get_version.outputs.VERSION }}
          draft: true

  build_release:
    name: Rust ${{ matrix.rust }} / OS ${{ matrix.os }}
    needs: create_release
    strategy:
      fail-fast: true
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
        rust: ['1.56.1']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Update rust version
        run: rustup update --no-self-update ${{ matrix.rust }} && rustup default ${{ matrix.rust}}
      - name: Set artifact name
        id: artifact
        run: |
          case ${{ matrix.os }} in
            *windows*) echo ::set-output name=ARTIFACT::fluminurs-cli.windows.exe ;;
            *ubuntu*)  echo ::set-output name=ARTIFACT::fluminurs-cli.ubuntu ;;
            *macos*)   echo ::set-output name=ARTIFACT::fluminurs-cli.macos ;;
            *)         exit 1
          esac
        shell: bash
      - name: Compile
        run: ./scripts/compile.${{ matrix.os }}.sh
        shell: bash
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.artifact.outputs.ARTIFACT }}
          asset_name: ${{ steps.artifact.outputs.ARTIFACT }}
          asset_content_type: application/octet-stream
